// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/strategicreserve/proposal.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataFeeCollectorFeedProposal details a proposal for use bet and house fee,
// together with how many tokens are proposed to be transfered.
type DataFeeCollectorFeedProposal struct {
	Title         string                                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HouseFeeSpend github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=house_fee_spend,json=houseFeeSpend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"house_fee_spend" yaml:"house_fee_spend"`
	BetFeeSpend   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=bet_fee_spend,json=betFeeSpend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_fee_spend" yaml:"bet_fee_spend"`
}

func (m *DataFeeCollectorFeedProposal) Reset()      { *m = DataFeeCollectorFeedProposal{} }
func (*DataFeeCollectorFeedProposal) ProtoMessage() {}
func (*DataFeeCollectorFeedProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d70a8fd7b5e98ce1, []int{0}
}
func (m *DataFeeCollectorFeedProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataFeeCollectorFeedProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataFeeCollectorFeedProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataFeeCollectorFeedProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFeeCollectorFeedProposal.Merge(m, src)
}
func (m *DataFeeCollectorFeedProposal) XXX_Size() int {
	return m.Size()
}
func (m *DataFeeCollectorFeedProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFeeCollectorFeedProposal.DiscardUnknown(m)
}

var xxx_messageInfo_DataFeeCollectorFeedProposal proto.InternalMessageInfo

// DataFeeCollectorFeedProposalWithDeposit defines a DataFeeCollectorFeedProposal
// with a deposit
type DataFeeCollectorFeedProposalWithDeposit struct {
	Title         string                                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HouseFeeSpend github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=house_fee_spend,json=houseFeeSpend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"house_fee_spend" yaml:"house_fee_spend"`
	BetFeeSpend   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=bet_fee_spend,json=betFeeSpend,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_fee_spend" yaml:"bet_fee_spend"`
	Deposit       string                                 `protobuf:"bytes,5,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *DataFeeCollectorFeedProposalWithDeposit) Reset() {
	*m = DataFeeCollectorFeedProposalWithDeposit{}
}
func (m *DataFeeCollectorFeedProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*DataFeeCollectorFeedProposalWithDeposit) ProtoMessage()    {}
func (*DataFeeCollectorFeedProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d70a8fd7b5e98ce1, []int{1}
}
func (m *DataFeeCollectorFeedProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataFeeCollectorFeedProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataFeeCollectorFeedProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataFeeCollectorFeedProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFeeCollectorFeedProposalWithDeposit.Merge(m, src)
}
func (m *DataFeeCollectorFeedProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *DataFeeCollectorFeedProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFeeCollectorFeedProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_DataFeeCollectorFeedProposalWithDeposit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DataFeeCollectorFeedProposal)(nil), "sgenetwork.sge.strategicreserve.DataFeeCollectorFeedProposal")
	proto.RegisterType((*DataFeeCollectorFeedProposalWithDeposit)(nil), "sgenetwork.sge.strategicreserve.DataFeeCollectorFeedProposalWithDeposit")
}

func init() {
	proto.RegisterFile("sge/strategicreserve/proposal.proto", fileDescriptor_d70a8fd7b5e98ce1)
}

var fileDescriptor_d70a8fd7b5e98ce1 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0x3b, 0x8f, 0xd3, 0x40,
	0x10, 0xc7, 0xed, 0x40, 0x78, 0x6c, 0x08, 0x48, 0x56, 0x84, 0x2c, 0x84, 0xbc, 0x91, 0x91, 0x80,
	0x82, 0xd8, 0x45, 0xba, 0x94, 0x21, 0xb2, 0xa0, 0x40, 0x42, 0xa6, 0x40, 0xa2, 0x89, 0xfc, 0x18,
	0x36, 0x26, 0x8e, 0x77, 0xb5, 0x3b, 0x01, 0xf2, 0x0d, 0x28, 0x29, 0x29, 0xf3, 0x59, 0xa8, 0x52,
	0xa6, 0x44, 0x14, 0xd6, 0x29, 0x69, 0xae, 0x4e, 0x73, 0xed, 0xc9, 0x8f, 0x48, 0xb9, 0xdc, 0xe9,
	0xa4, 0xeb, 0xaf, 0xda, 0x9d, 0x99, 0xff, 0xcc, 0x6f, 0xf4, 0x97, 0x86, 0xbc, 0x50, 0x0c, 0x5c,
	0x85, 0x32, 0x40, 0x60, 0x49, 0x24, 0x41, 0x81, 0xfc, 0x0e, 0xae, 0x90, 0x5c, 0x70, 0x15, 0xa4,
	0x8e, 0x90, 0x1c, 0xb9, 0x41, 0x15, 0x83, 0x0c, 0xf0, 0x07, 0x97, 0x53, 0x47, 0x31, 0x70, 0x8e,
	0xf5, 0xcf, 0x3a, 0x8c, 0x33, 0x5e, 0x6a, 0xdd, 0xe2, 0x57, 0xb5, 0xd9, 0x7f, 0x1b, 0xe4, 0xf9,
	0x28, 0xc0, 0xc0, 0x03, 0x78, 0xcb, 0xd3, 0x14, 0x22, 0xe4, 0xd2, 0x03, 0x88, 0x3f, 0xd6, 0xd3,
	0x8d, 0x0e, 0x69, 0x62, 0x82, 0x29, 0x98, 0x7a, 0x57, 0x7f, 0xfd, 0xd0, 0xaf, 0x02, 0xa3, 0x4b,
	0x5a, 0x31, 0xa8, 0x48, 0x26, 0x02, 0x13, 0x9e, 0x99, 0x8d, 0xb2, 0x76, 0x98, 0x32, 0x04, 0x79,
	0x32, 0xe1, 0x73, 0x05, 0xe3, 0xaf, 0x00, 0x63, 0x25, 0x20, 0x8b, 0xcd, 0x3b, 0x85, 0x6a, 0xf8,
	0x6e, 0x95, 0x53, 0xed, 0x7f, 0x4e, 0x5f, 0xb2, 0x04, 0x27, 0xf3, 0xd0, 0x89, 0xf8, 0xcc, 0x8d,
	0xb8, 0x9a, 0x71, 0x55, 0x3f, 0x3d, 0x15, 0x4f, 0x5d, 0x5c, 0x08, 0x50, 0xce, 0xfb, 0x0c, 0x77,
	0x39, 0x7d, 0xba, 0x08, 0x66, 0xe9, 0xc0, 0x3e, 0x1a, 0x67, 0xfb, 0xed, 0x32, 0xe3, 0x01, 0x7c,
	0x2a, 0x62, 0xe3, 0x1b, 0x69, 0x87, 0x80, 0x07, 0xbc, 0xbb, 0x25, 0xcf, 0xbb, 0x31, 0xaf, 0x53,
	0xf1, 0x2e, 0x0c, 0xb3, 0xfd, 0x56, 0x08, 0xb8, 0x67, 0x0d, 0x1e, 0xfd, 0x5a, 0x52, 0xed, 0xcf,
	0x92, 0x6a, 0xa7, 0x4b, 0xaa, 0xd9, 0x67, 0x0d, 0xf2, 0xea, 0x3a, 0x13, 0x3f, 0x27, 0x38, 0x19,
	0x81, 0xe0, 0x2a, 0xc1, 0x5b, 0x3f, 0xaf, 0xf2, 0xd3, 0x78, 0x43, 0xee, 0xc7, 0x95, 0x41, 0x66,
	0xb3, 0xa4, 0x18, 0xbb, 0x9c, 0x3e, 0xae, 0xfa, 0xea, 0x82, 0xed, 0xef, 0x25, 0x83, 0x07, 0xb5,
	0xfb, 0xfa, 0xf0, 0xc3, 0x6a, 0x63, 0xe9, 0xeb, 0x8d, 0xa5, 0x9f, 0x6c, 0x2c, 0xfd, 0xf7, 0xd6,
	0xd2, 0xd6, 0x5b, 0x4b, 0xfb, 0xb7, 0xb5, 0xb4, 0x2f, 0xfd, 0x83, 0xf5, 0x14, 0x83, 0x5e, 0x7d,
	0x1b, 0xc5, 0xdf, 0xfd, 0x79, 0xf9, 0x9a, 0xca, 0x7d, 0xc3, 0x7b, 0xe5, 0x51, 0xf4, 0xcf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x51, 0x67, 0x4d, 0x72, 0x03, 0x00, 0x00,
}

func (m *DataFeeCollectorFeedProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataFeeCollectorFeedProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataFeeCollectorFeedProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BetFeeSpend.Size()
		i -= size
		if _, err := m.BetFeeSpend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.HouseFeeSpend.Size()
		i -= size
		if _, err := m.HouseFeeSpend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataFeeCollectorFeedProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataFeeCollectorFeedProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataFeeCollectorFeedProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.BetFeeSpend.Size()
		i -= size
		if _, err := m.BetFeeSpend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.HouseFeeSpend.Size()
		i -= size
		if _, err := m.HouseFeeSpend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataFeeCollectorFeedProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.HouseFeeSpend.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = m.BetFeeSpend.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *DataFeeCollectorFeedProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.HouseFeeSpend.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = m.BetFeeSpend.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataFeeCollectorFeedProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataFeeCollectorFeedProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataFeeCollectorFeedProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseFeeSpend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HouseFeeSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFeeSpend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFeeSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataFeeCollectorFeedProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataFeeCollectorFeedProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataFeeCollectorFeedProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseFeeSpend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HouseFeeSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFeeSpend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFeeSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
