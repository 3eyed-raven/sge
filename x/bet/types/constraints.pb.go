// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/bet/constraints.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlacementConstraints is the bet constrains type for the bets
type PlacementConstraints struct {
	// min_amount is the minimum allowed bet amount.
	MinAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=min_amount,json=minAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_amount"`
	// bet_fee is the fee that the bettor needs to pay to bet.
	BetFee github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bet_fee,json=betFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_fee"`
}

func (m *PlacementConstraints) Reset()         { *m = PlacementConstraints{} }
func (m *PlacementConstraints) String() string { return proto.CompactTextString(m) }
func (*PlacementConstraints) ProtoMessage()    {}
func (*PlacementConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_902ec3e683a9aac6, []int{0}
}
func (m *PlacementConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacementConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementConstraints.Merge(m, src)
}
func (m *PlacementConstraints) XXX_Size() int {
	return m.Size()
}
func (m *PlacementConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementConstraints proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PlacementConstraints)(nil), "sgenetwork.sge.bet.PlacementConstraints")
}

func init() { proto.RegisterFile("sge/bet/constraints.proto", fileDescriptor_902ec3e683a9aac6) }

var fileDescriptor_902ec3e683a9aac6 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd0, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x06, 0xe0, 0x5b, 0x8b, 0x48, 0xb6, 0x3c, 0x52, 0x44, 0x8b, 0x8d, 0x58, 0x88, 0x4d, 0x76,
	0x0b, 0x5f, 0x40, 0x23, 0x28, 0x16, 0x82, 0x58, 0xda, 0x84, 0xdb, 0x73, 0x5c, 0x97, 0xb8, 0x33,
	0xe1, 0x66, 0x82, 0xfa, 0x16, 0x3e, 0x89, 0xcf, 0x91, 0x32, 0xa5, 0x58, 0x04, 0xb9, 0x7b, 0x11,
	0xc9, 0x1a, 0xd0, 0xda, 0x6a, 0x7e, 0x98, 0xe1, 0x83, 0xf9, 0xf5, 0x1e, 0x07, 0x70, 0x1e, 0xc4,
	0xd5, 0x84, 0x2c, 0x4d, 0x15, 0x51, 0xd8, 0xce, 0x1b, 0x12, 0x2a, 0x4b, 0x0e, 0x80, 0x20, 0xcf,
	0xd4, 0xcc, 0x2c, 0x07, 0xb0, 0x1e, 0x64, 0x7f, 0x10, 0x28, 0x50, 0x5e, 0xbb, 0x4d, 0xfa, 0xb9,
	0x3c, 0x7c, 0x57, 0x7a, 0x70, 0xf3, 0x54, 0xd5, 0x90, 0x00, 0xe5, 0xfc, 0x17, 0x2a, 0xaf, 0xb5,
	0x4e, 0x11, 0xa7, 0x55, 0xa2, 0x05, 0xca, 0x50, 0x1d, 0xa8, 0xe3, 0xfe, 0xc4, 0x2e, 0xd7, 0xa3,
	0xe2, 0x73, 0x3d, 0x3a, 0x0a, 0x51, 0x1e, 0x17, 0xde, 0xd6, 0x94, 0x5c, 0x4d, 0x9c, 0x88, 0xb7,
	0x63, 0xcc, 0xf7, 0x33, 0x27, 0xaf, 0x73, 0x60, 0x7b, 0x85, 0x72, 0xdb, 0x4f, 0x11, 0xcf, 0x32,
	0x50, 0x5e, 0xea, 0x5d, 0x0f, 0x32, 0x7d, 0x00, 0x18, 0xee, 0xfc, 0xcb, 0xea, 0x79, 0x90, 0x0b,
	0x80, 0xc9, 0xe9, 0xb2, 0x35, 0x6a, 0xd5, 0x1a, 0xf5, 0xd5, 0x1a, 0xf5, 0xd6, 0x99, 0x62, 0xd5,
	0x99, 0xe2, 0xa3, 0x33, 0xc5, 0xdd, 0x5f, 0x89, 0x03, 0x8c, 0xb7, 0x05, 0x6c, 0xb2, 0x7b, 0xc9,
	0x45, 0x65, 0xcd, 0xf7, 0xf2, 0xe7, 0x27, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0xd4, 0x9b,
	0x7e, 0x40, 0x01, 0x00, 0x00,
}

func (m *PlacementConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacementConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BetFee.Size()
		i -= size
		if _, err := m.BetFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintConstraints(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MinAmount.Size()
		i -= size
		if _, err := m.MinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintConstraints(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintConstraints(dAtA []byte, offset int, v uint64) int {
	offset -= sovConstraints(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlacementConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinAmount.Size()
	n += 1 + l + sovConstraints(uint64(l))
	l = m.BetFee.Size()
	n += 1 + l + sovConstraints(uint64(l))
	return n
}

func sovConstraints(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConstraints(x uint64) (n int) {
	return sovConstraints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlacementConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConstraints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConstraints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConstraints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConstraints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConstraints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConstraints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConstraints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConstraints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConstraints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConstraints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConstraints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConstraints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConstraints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConstraints
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConstraints
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConstraints
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConstraints        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConstraints          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConstraints = fmt.Errorf("proto: unexpected end of group")
)
